# This looks like a grammar. Left-associative operators recurse on the left and
# descend on the right. Right-associative operators flip. There are cleanly
# divided precedence levels.
expression = logic

logic = logic && relational
    | logic || relational
    | relational

relational = relational == bitwise
    | relational != bitwise
    | relational < bitwise
    | relational <= bitwise
    | relational > bitwise
    | relational >= bitwise
    | bitwise

bitwise = bitwise & arithmetic
    | bitwise | arithmetic
    | bitwise ^ arithmetic
    | bitwise << arithmetic
    | bitwise >> arithmetic
    | arithmetic

arithmetic = arithmetic + multiplicative
    | arithmetic - multiplicative
    | multiplicative

multiplicative = multiplicative * unary
    | multiplicative / unary
    | multiplicative % unary
    | unary

# This ordering means ~6 ** 2 will parse as ~(6 ** 2). Is that you intent? We
# often omit whitespace around unary operators to indicate their extremely high
# precedence.
unary = - exponential
    | ! exponential
    | ~ exponential
    | exponential

# Good, this ordering of non-terminals makes exponentiation right-associative.
exponential = atom ** exponential
    | atom

atom = INT
    | FLOAT
    | BOOLEAN
    | STRING
    | ( expression )
    | [ expression , expression ]
    | # [ expression , expression ]
    | MAX ( [ expression , expression ] , [ expression , expression ] )
    | MIN ( [ expression , expression ] , [ expression , expression ] )
    | MEAN ( [ expression , expression ] , [ expression , expression ] )
    | SUM ( [ expression , expression ] , [ expression , expression ] )
    | FLOAT_CAST ( expression )
    | INT_CAST (expression )
